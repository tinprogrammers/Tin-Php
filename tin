#!/usr/bin/env php
<?php

$C = [
  'cyan' => "\033[1;36m",
  'green' => "\033[1;32m",
  'red' => "\033[1;31m",
  'reset' => "\033[0m"
];

echo "{$C['cyan']}‚ú® TinProgrammers CLI ‚ú®{$C['reset']}\n\n";

// --- Arguments ---
$command = $argv[1] ?? null;
$param = $argv[2] ?? null;

switch ($command) {
  case 'new':
    createProject($param);
    break;

  case 'make:controller':
    checkIfInProject();
    makeController($param);
    break;

  case 'make:model':
    checkIfInProject();
    makeModel($param);
    break;

  case 'make:view':
    checkIfInProject();
    makeView($param);
    break;

  case 'make:mvc':
    checkIfInProject();
    makeController($param);
    makeModel($param);
    makeView(strtolower($param));
    echo "{$C['green']}‚ú® All done: Controller, Model & View created!{$C['reset']}\n";
    break;

  case 'make:migration':
    checkIfInProject();
    makeMigration($param);
    break;

  case 'migrate':
    checkIfInProject();
    runMigrations();
    break;

  case 'migrate:rollback':
    checkIfInProject();
    rollbackMigrations();
    break;

  default:
    echo "{$C['red']}‚ùå Unknown command: $command{$C['reset']}\n";
    echo "Usage:\n";
    echo "  tin new myproject\n";
    echo "  tin make:controller MyController\n";
    echo "  tin make:model User\n";
    echo "  tin make:view dashboard\n";
    echo "  tin make:mvc Blog\n";
    echo "  tin make:migration create_users_table\n";
    echo "  tin migrate\n";
    echo "  tin migrate:rollback\n";
    break;
}

exit(0);

// -------------------- Functions --------------------

function checkIfInProject() {
  if (!file_exists(getcwd() . '/public/index.php') || !is_dir(getcwd() . '/app')) {
    echo "‚ùå Not inside a Tin MVC project! Run this inside your project root.\n";
    exit(1);
  }
}

function createProject($projectName) {
  global $C;

  if (!$projectName) {
    echo "{$C['red']}‚ùå Usage: tin new <project-name>{$C['reset']}\n";
    exit(1);
  }

  if (version_compare(PHP_VERSION, '8.0.0', '<')) {
    echo "{$C['red']}‚ùå PHP 8.0+ required! Current: " . PHP_VERSION . "{$C['reset']}\n";
    exit(1);
  }

  if (!shell_exec('composer --version')) {
    echo "{$C['red']}‚ùå Composer not found!{$C['reset']}\n";
    exit(1);
  }

  $targetDir = getcwd() . '/' . $projectName;
  if (is_dir($targetDir)) {
    echo "{$C['red']}‚ùå Directory already exists: $projectName{$C['reset']}\n";
    exit(1);
  }

  echo "üìÅ Creating project structure...\n";
  recurse_copy(__DIR__ . '/skeleton', $targetDir);
  chdir($targetDir);

  if (file_exists('.env.example') && !file_exists('.env')) {
    rename('.env.example', '.env');
    echo "üîë .env created\n";
  }

  echo "üì¶ Installing Composer deps...\n";
  exec('composer install');

  echo "üêô Initializing Git...\n";
  exec('git init');
  exec('git add .');
  exec('git commit -m \"Initial commit üéâ\"');

  echo "{$C['green']}‚úÖ Project '{$projectName}' ready!{$C['reset']}\n";
}

function makeController($name) {
  global $C;

  if (!$name) {
    echo "{$C['red']}‚ùå Usage: tin make:controller <ControllerName>{$C['reset']}\n";
    return;
  }

  $dir = getcwd() . "/app/Controllers";
  if (!is_dir($dir)) mkdir($dir, 0777, true);

  $file = "$dir/{$name}.php";
  if (file_exists($file)) {
    echo "{$C['red']}‚ùå Controller already exists!{$C['reset']}\n";
    return;
  }

  $template = "<?php\n\nnamespace App\Controllers;\n\nclass {$name} {\n  public function index() {\n    echo \"Hello from {$name} controller!\";\n  }\n}\n";

  file_put_contents($file, $template);
  echo "{$C['green']}‚úÖ Controller '{$name}' created!{$C['reset']}\n";
}

function makeModel($name) {
  global $C;

  if (!$name) {
    echo "{$C['red']}‚ùå Usage: tin make:model <ModelName>{$C['reset']}\n";
    return;
  }

  $dir = getcwd() . "/app/Models";
  if (!is_dir($dir)) mkdir($dir, 0777, true);

  $file = "$dir/{$name}.php";
  if (file_exists($file)) {
    echo "{$C['red']}‚ùå Model already exists!{$C['reset']}\n";
    return;
  }

  $tableName = strtolower($name) . "s";

  $template = <<<EOD
<?php
namespace App\Models;

require_once __DIR__ . '/../Helpers/db.php';

class {$name} {

  /**
   * Sab records ko DB se laata hai.
   */
  public static function all() {
    \$result = db()->query("SELECT * FROM {$tableName}");
    return \$result->fetch_all(MYSQLI_ASSOC);
  }

  /**
   * Ek specific record ko ID se find karta hai.
   */
  public static function find(\$id) {
    \$stmt = db()->prepare("SELECT * FROM {$tableName} WHERE id = ?");
    \$stmt->bind_param("i", \$id);
    \$stmt->execute();
    return \$stmt->get_result()->fetch_assoc();
  }

  /**
   * Naya record create karta hai.
   * Customize this according to your table columns.
   */
  public static function create(\$data) {
    // Example query - change columns as needed
    \$stmt = db()->prepare("INSERT INTO {$tableName} (column1, column2) VALUES (?, ?)");
    \$stmt->bind_param("ss", \$data['column1'], \$data['column2']);
    return \$stmt->execute();
  }

  /**
   * Ek record ko ID se update karta hai.
   */
  public static function update(\$id, \$data) {
    // Example query - change columns as needed
    \$stmt = db()->prepare("UPDATE {$tableName} SET column1 = ?, column2 = ? WHERE id = ?");
    \$stmt->bind_param("ssi", \$data['column1'], \$data['column2'], \$id);
    return \$stmt->execute();
  }

  /**
   * Ek record ko ID se delete karta hai.
   */
  public static function delete(\$id) {
    \$stmt = db()->prepare("DELETE FROM {$tableName} WHERE id = ?");
    \$stmt->bind_param("i", \$id);
    return \$stmt->execute();
  }

}
EOD;

  file_put_contents($file, $template);
  echo "{$C['green']}‚úÖ Model '{$name}' created with CRUD template!{$C['reset']}\n";
}

function makeView($name) {
  global $C;

  if (!$name) {
    echo "{$C['red']}‚ùå Usage: tin make:view <view-name>{$C['reset']}\n";
    return;


  }

  $dir = getcwd() . "Views";
  if (!is_dir($dir)) mkdir($dir, 0777, true);

  $file = "$dir/{$name}.php";
  if (file_exists($file)) {
    echo "{$C['red']}‚ùå View already exists!{$C['reset']}\n";
    return;
  }

  $template = "<h1>Welcome to {$name} view üëÄ</h1>";

  file_put_contents($file, $template);
  echo "{$C['green']}‚úÖ View '{$name}' created!{$C['reset']}\n";
}

function makeMigration($name) {
  global $C;

  if (!$name) {
    echo "{$C['red']}‚ùå Usage: tin make:migration <name>{$C['reset']}\n";
    return;
  }

  $dir = getcwd() . "/database/migrations";
  if (!is_dir($dir)) mkdir($dir, 0777, true);

  $timestamp = date('Y_m_d_His');
  $file = "{$dir}/{$timestamp}_{$name}.php";

  $template = "<?php\n\nreturn [\n  'up' => function(\$db) {\n    // Add your table creation SQL here\n  },\n\n  'down' => function(\$db) {\n    // Add your table DROP SQL here\n  }\n];\n";

  file_put_contents($file, $template);
  echo "{$C['green']}‚úÖ Migration '{$name}' created!{$C['reset']}\n";
}

function runMigrations() {
  global $C;

  $dir = getcwd() . "/database/migrations";
  if (!is_dir($dir)) {
    echo "{$C['red']}‚ùå No migrations directory found!{$C['reset']}\n";
    return;
  }

  $db = getDbConnection();
  if (!$db) return;

  echo "üîó DB Connected! Running migrations...\n";
  foreach (glob($dir . '/*.php') as $file) {
    $migration = include $file;
    $migration['up']($db);
  }
  $db->close();
  echo "{$C['green']}‚úÖ All migrations executed!{$C['reset']}\n";
}

function rollbackMigrations() {
  global $C;

  $dir = getcwd() . "/database/migrations";
  if (!is_dir($dir)) {
    echo "{$C['red']}‚ùå No migrations directory found!{$C['reset']}\n";
    return;
  }

  $db = getDbConnection();
  if (!$db) return;

  echo "üîó DB Connected! Rolling back migrations...\n";
  $files = glob($dir . '/*.php');
  rsort($files);
  foreach ($files as $file) {
    $migration = include $file;
    $migration['down']($db);
  }
  $db->close();
  echo "{$C['green']}‚úÖ Rollback complete!{$C['reset']}\n";
}

function getDbConnection() {
  global $C;

  if (!file_exists('.env')) {
    echo "{$C['red']}‚ùå .env file not found!{$C['reset']}\n";
    return null;
  }

  $env = parse_ini_file('.env');

  $db = new mysqli(
    $env['DB_HOST'] ?? 'localhost',
    $env['DB_USER'] ?? 'root',
    $env['DB_PASS'] ?? '',
    $env['DB_NAME'] ?? ''
  );

  if ($db->connect_error) {
    echo "{$C['red']}‚ùå DB Connection failed: {$db->connect_error}{$C['reset']}\n";
    return null;
  }

  return $db;
}

function recurse_copy($src, $dst) {
  $dir = opendir($src);
  @mkdir($dst, 0777, true);
  while (false !== ($file = readdir($dir))) {
    if (($file != '.') && ($file != '..')) {
      if (is_dir($src . '/' . $file)) {
        recurse_copy($src . '/' . $file, $dst . '/' . $file);
      } else {
        copy($src . '/' . $file, $dst . '/' . $file);
      }
    }
  }
  closedir($dir);
}
